service: modjoul-sample-app
provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  memorySize: 128
  environment:
    USERS_TABLE: 'users-table-${self:provider.stage}'
    QUEUE_NAME: doSomethingQueue
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "*"
    - Effect: Allow
      Action:
        - sqs:SendMessage
      Resource:
        - Fn::GetAtt: [ doSomethingQueue, Arn ]
functions:
  app:
    handler: app/app.handler
    memorySize: 128
    # Reserving concurrency to make sure lambda is throttled
    reservedConcurrency: 3
    events:
      - http:
          path: /
          method: ANY
          cors: true
      - http:
          path: /{proxy+}
          method: ANY
          cors: true

  receiver:
    handler: app/app.someQueueReciver
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - doSomethingQueue
              - Arn
      # - s3:
      #     bucket: bucket
      #     event: s3:ObjectCreated:*
      #     rules:
      #       - prefix: uploads/
      #       - suffix: .jpg


resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        # Set the capacity to auto-scale
        BillingMode: PAY_PER_REQUEST

    doSomethingQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: doSomethingQueue